#!/usr/bin/env bash
# ref: https://github.com/radityaharya/bw-fzf

trap 'exit_handler' INT TERM
trap 'cleanup' EXIT

ITEMS=
TIMEOUT=60s
SEARCH_TERM=
SESSION_FILE="$HOME/.bw-fzf-session"
TIMEOUT_PID=
TIMESTAMP_FILE="/tmp/bw-fzf-active.timestamp"
TEMP_ITEMS_FILE=
USE_CLI=true
UNLOCKED=false
API_URL=http://localhost:49186

# Determine the clipboard command based on the session type
if [ "$XDG_SESSION_TYPE" = "wayland" ]; then
  CLIP_COMMAND="wl-copy"
  CLIP_ARGS=""
else
  CLIP_COMMAND="xclip"
  CLIP_ARGS="-selection clipboard"
fi

function api_request() {
  local endpoint="$1"
  local method="${2:-GET}"
  local search_param="$3"
  local url="${API_URL}${endpoint}"

  if [[ -n "$search_param" ]]; then
    url="${url}?search=${search_param}"
  fi

  curl --connect-timeout 1 -s -X "$method" "$url"
}

if ! STATUS=$(curl -s "${API_URL}/status"); then
  USE_CLI=true
  echo "Bitwarden server not running, using CLI mode"
else
  if [[ $(echo "$STATUS" | jq -r '.data.template.status') == "unlocked" ]]; then
    UNLOCKED=true
  fi
fi

function exit_handler() {
  trap - INT TERM
  cleanup
  exit 1
}

function cleanup() {
  if [[ -n "$TIMEOUT_PID" ]]; then
    kill "$TIMEOUT_PID" 2>/dev/null || true
    wait "$TIMEOUT_PID" 2>/dev/null || true
  fi

  rm -f "$TIMESTAMP_FILE" 2>/dev/null
  rm -f "$TEMP_ITEMS_FILE" 2>/dev/null

  pkill -P $$ 2>/dev/null || true
  wait 2>/dev/null || true
}

function monitor_inactivity() {
  rm -f "$TIMESTAMP_FILE"
  touch "$TIMESTAMP_FILE"
  while true; do
    sleep 1
    if [[ -f "$TIMESTAMP_FILE" ]]; then
      if [[ $(expr "$(date +%s)" - "$(stat -c %Y "$TIMESTAMP_FILE")") -ge ${TIMEOUT%s} ]]; then
        echo -e "\nSession timed out after ${TIMEOUT}"
        cleanup
        exit 1
      fi
    fi
  done &
  TIMEOUT_PID=$!
}

function get_session() {
  if [[ -n "${BW_SESSION}" ]]; then
    echo "${BW_SESSION}"
    return 0
  fi

  if [[ -f "$SESSION_FILE" ]]; then
    local session
    session=$(cat "$SESSION_FILE")
    if [[ -n "$session" ]]; then
      echo "$session"
      return 0
    fi
  fi

  return 1
}

function handle_session_save() {
  read -p "Do you want to save this session? [y/N] " save_session
  local session

  if [[ "$USE_CLI" == "true" ]]; then
	  session=$(echo "$password" | bw unlock --raw 2>/dev/null)
  else
    local response
    response=$(curl -s -X POST "${API_URL}/unlock" \
      -H "Content-Type: application/json" \
      -d "{\"password\": \"$password\"}")
    
    session=$(echo "$response" | jq -r '.data.raw')
  fi
  if [[ -z "$session" ]]; then
    echo "Could not unlock vault"
    exit 1
  fi

  case $save_session in
  [Yy]*)
    echo "Saving session..."
    echo "$session" >"$SESSION_FILE"
    chmod 600 "$SESSION_FILE"
    echo "Session saved to $SESSION_FILE"
    ;;
  *)
    echo "Session will not be saved"
    ;;
  esac

  export BW_SESSION="$session"
  echo "Unlocked!"
}

function ask_password() {
  local password

  if command -v systemd-ask-password &>/dev/null; then
    password=$(systemd-ask-password "Password: ")
  else
    read -s -p "Password [hidden]: " password
    echo
  fi

  handle_session_save
}

function load_items() {
  local search_term="$1"
  echo "Loading items..."

  export BW_SESSION=$(get_session)

  while true; do
    if $USE_CLI; then
      if [[ -n "$search_term" ]]; then
        ITEMS=$(bw list items --search "$search_term" --session "$BW_SESSION"2>&1)
      else
        ITEMS=$(bw list items --nointeraction --session "$BW_SESSION" 2>&1)
      fi
    else
      ITEMS=$(api_request "/list/object/items" "GET" "$search_term")
    fi

    if [[ "$ITEMS" == *"Vault is locked."* ]]; then
      echo "Vault is locked, requesting password..."
      ask_password
      continue
    elif [[ -z "$ITEMS" || "$ITEMS" == "Not Found" ]]; then
      echo "Failed to load items"
      exit 1
    fi

    # Если получили данные, извлекаем их из ответа API
    if ! $USE_CLI; then
      ITEMS=$(echo "$ITEMS" | jq -r '.data.data')
    fi

    echo "Items loaded successfully."
    break
  done
}

export -f monitor_inactivity

function bw_list() {
  local prompt

  TEMP_ITEMS_FILE=$(mktemp)
  echo "$ITEMS" >"$TEMP_ITEMS_FILE"
  chmod 600 "$TEMP_ITEMS_FILE"

  if [ -n "$SEARCH_TERM" ]; then
    prompt="bw-fzf (filter: $SEARCH_TERM) ➜ "
  else
    prompt="bw-fzf ➜ "
  fi

  monitor_inactivity

  # Define help text as a variable
  local HELP_TEXT="
    Keyboard Shortcuts:
    ------------------
    ctrl-h        Show this help window
    ctrl-u        Copy username to clipboard
    ctrl-p        Copy password to clipboard
    ctrl-o        Copy TOTP code to clipboard
    ctrl-y        Toggle preview window

    Navigation:
    ----------
    ↑/↓          Select item
    Enter        Select item
    Page Up/Down Scroll preview window
    /            Filter items
    ESC          Clear filter/Exit

    Tips:
    -----
    • Type to filter entries
    • All copied items go to system clipboard
    • Session times out after ${TIMEOUT} of inactivity
    "

jq -r '.[] | "\u001b[1;36m" + .name + "\u001b[0m" + (if .login.username != null and .login.username != "" then " 👤 \u001b[33m" + .login.username + "\u001b[0m" else "" end) + "\t\u001b[90m" + .id + "\u001b[0m"' "$TEMP_ITEMS_FILE" |
    FZF_PREVIEW_FILE="$TEMP_ITEMS_FILE" SHELL="bash" fzf \
      --cycle --inline-info --ansi --no-mouse --layout=reverse \
      --prompt="$prompt" \
      --delimiter='\t' \
      --with-nth=1 \
      --bind="change:execute-silent(touch $TIMESTAMP_FILE)+top" \
      --bind="focus:execute-silent(touch $TIMESTAMP_FILE)" \
      --bind="ctrl-z:execute(echo {} | cut -f2 | sed 's/\x1b\[[0-9;]*m//g')" \
      --bind="ctrl-u:execute(item_id=\$(echo {} | cut -f2 | sed 's/\x1b\[[0-9;]*m//g'); username=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.username' \"$TEMP_ITEMS_FILE\"); echo -n \"\$username\" | $CLIP_COMMAND $CLIP_ARGS; touch $TIMESTAMP_FILE)" \
      --bind="ctrl-p:execute(item_id=\$(echo {} | cut -f2 | sed 's/\x1b\[[0-9;]*m//g'); password=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.password' \"$TEMP_ITEMS_FILE\"); echo -n \"\$password\" | $CLIP_COMMAND $CLIP_ARGS; touch $TIMESTAMP_FILE)" \
      --bind="enter:execute-silent(item_id=\$(echo {} | cut -f2 | sed 's/\x1b\[[0-9;]*m//g'); password=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.password' \"$TEMP_ITEMS_FILE\"); echo -n \"\$password\" | $CLIP_COMMAND $CLIP_ARGS; touch $TIMESTAMP_FILE)+abort" \
      --bind="ctrl-o:execute(item_id=\$(echo {} | cut -f2 | sed 's/\x1b\[[0-9;]*m//g'); totp_secret=\$(jq -r --arg id \"\$item_id\" '.[] | select(.id == \$id) | .login.totp' \"$TEMP_ITEMS_FILE\"); if [[ \"\$totp_secret\" != \"null\" ]]; then if command -v oathtool &> /dev/null; then totp=\$(oathtool --totp -b \"\$totp_secret\"); else totp=\$(bw get totp \"\$item_id\"); fi; echo -n \"\$totp\" | $CLIP_COMMAND $CLIP_ARGS; else echo \"No TOTP available for this item\"; fi)+execute-silent(touch $TIMESTAMP_FILE)" \
      --bind="ctrl-h:preview(echo \"$HELP_TEXT\")" \
      --bind="ctrl-y:toggle-preview" \
      --header="Press ctrl-h for help" \
      --preview-window='right:50%:hidden' \
      --preview='
        if [[ "{}" == "HELP" ]]; then
            echo "$HELP_TEXT"
        else
            item_id=$(echo {} | cut -f2 | sed "s/\x1b\[[0-9;]*m//g")
            touch '"$TIMESTAMP_FILE"'
            item=$(jq -r --arg id "$item_id" ".[] | select(.id == \$id)" "$FZF_PREVIEW_FILE")

            username=$(echo "$item" | jq -r ".login.username")
            password=$(echo "$item" | jq -r ".login.password")
            notes=$(echo "$item" | jq -r ".notes // empty")
            creationDate=$(echo "$item" | jq -r ".creationDate")
            revisionDate=$(echo "$item" | jq -r ".revisionDate")
            uris=$(echo "$item" | jq -r ".login.uris[].uri" | sed "s/^/  • /")

            totp_available=$(echo "$item" | jq -r ".login.totp != null")
            if [ "$totp_available" = "true" ]; then
                totp_secret=$(echo "$item" | jq -r ".login.totp")
                if command -v oathtool &> /dev/null; then
                    totp=$(oathtool --totp -b "$totp_secret")
                else
                    totp=$(bw get totp "$item_id")
                fi
            else
                totp="No TOTP available"
            fi

            bold=$(tput bold)
            normal=$(tput sgr0)
            cyan=$(tput setaf 6)
            red=$(tput setaf 1)
            underline=$(tput smul)
            nounderline=$(tput rmul)
            padding="  "

            printf "\n${padding}${bold}${underline}Login Details${nounderline}${normal}\n\n"
            printf "${padding}${bold}${cyan}Username${normal}\n${padding}  %s\n\n" "$username"
            printf "${padding}${bold}${cyan}Password${normal}\n${padding}  ${red}%s${normal}\n\n" "$password"
            printf "${padding}${bold}${cyan}TOTP${normal}\n${padding}  %s\n\n" "$totp"
            printf "${padding}${bold}${cyan}Notes${normal}\n${padding}  %s\n\n" "$notes"
            printf "${padding}${bold}${cyan}URIs${normal}\n%s\n\n" "$uris"
            printf "${padding}${bold}${cyan}Created${normal}\n${padding}  %s\n" "$creationDate"
            printf "${padding}${bold}${cyan}Modified${normal}\n${padding}  %s\n" "$revisionDate"
        fi
    '
}

function install_script() {
  local install_path="/usr/local/bin/bw-fzf"

  if [[ "$EUID" -ne 0 ]]; then
    echo "This script must be run as root. Try using sudo."
    exit 1
  fi

  if cp "$0" "$install_path" && chmod +x "$install_path"; then
    echo "Successfully installed to $install_path"
  else
    echo "Failed to install. Check your permissions."
    exit 1
  fi
}

function help() {
  echo "bw-fzf - A Bitwarden cli wrapper with fzf"
  echo "Project url: https://github.com/radityaharya/bw-fzf"
  echo "Author: Raditya Harya <contact@radityaharya.com>"
  echo
  echo "Usage: bw-fzf [OPTIONS]"
  echo
  echo "Options:"
  echo "  -i, --install    Install the script to /usr/local/bin"
  echo "  -h, --help       Show this help message"
  echo "  -t, --timeout    Set custom timeout (e.g., 30s, 1m). Default is 1 minute."
  echo "  -s, --search     Search term to filter items"
  echo
}

function main() {
  while [[ "$1" != "" ]]; do
    case $1 in
    -i | --install)
      install_script
      exit 0
      ;;
    -h | --help)
      help
      exit 0
      ;;
    -t | --timeout)
      shift
      TIMEOUT="$1"
      ;;
    -s | --search)
      shift
      SEARCH_TERM="$1"
      ;;
    -c | --cli)
      USE_CLI=true
      ;;
    *)
      echo "Invalid option: $1"
      help
      exit 1
      ;;
    esac
    shift
  done

	function check_dependencies() {
	  local missing=()
	  for cmd in bw jq fzf curl; do
		command -v "$cmd" >/dev/null || missing+=("$cmd")
	  done
	  
	  if ((${#missing[@]})); then
		echo "Missing required commands: ${missing[*]}"
		exit 1
	  fi
	}

  # Check for clipboard command availability
  if ! command -v $CLIP_COMMAND >/dev/null; then
    echo "WARNING: $CLIP_COMMAND is missing. Copy functionality will be unavailable"
  fi

  check_dependencies
  monitor_inactivity

  load_items "$SEARCH_TERM"
  bw_list
}

main "$@"
