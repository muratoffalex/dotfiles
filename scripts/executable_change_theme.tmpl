#!/usr/bin/env bash
{{ if (eq .chezmoi.os "darwin") }}
# Required parameters:
# @raycast.schemaVersion 1
# @raycast.title Change theme
# @raycast.mode silent

# Optional parameters:
# @raycast.icon 🌓
# @raycast.argument1 { "type": "dropdown", "placeholder": "light/dark/transparent", "optional": true, "data": [{"title": "Dark", "value": "dark"},{"title": "Light", "value": "light"},{"title": "Transparent", "value": "transparent"}]}
# @raycast.argument2 { "type": "text", "placeholder": "system 0/1", "optional": true }
{{ end }}
# Toggle dark and light themes for tmux, alacritty and neovim
# https://shapeshed.com/vim-tmux-alacritty-theme-switcher/

CACHE_DIR="$HOME/.cache/settings"
mkdir -p "$CACHE_DIR"

THEME=$1
[[ -z "$2" ]] && CHANGE_SYSTEM_THEME=1 || CHANGE_SYSTEM_THEME=$2

LIGHTTHEME="kanagawa-lotus"
DARKTHEME="kanagawa-wave"
TRANSPARENTTHEME="transparent"
VIMCONF="$HOME/.config/nvim/lua/config/init.lua"
ALACRITTYCONF="$HOME/.config/alacritty/alacritty.toml"
TMUXCONF="$HOME/.config/tmux/tmux.conf"
THEMEENV="theme"

{{ if (eq .chezmoi.os "darwin") }}
CURRENT_MODE=$(defaults read -g AppleInterfaceStyle 2> /dev/null)
{{ else if and (eq .chezmoi.os "linux") -}}
if command -v dconf >/dev/null 2>&1; then
  CURRENT_MODE=$(dconf read /org/gnome/desktop/interface/color-scheme)
fi
{{else}}
CURRENT_MODE="unknown"
{{ end }}

# prefer-dark for linux
if [ "$CURRENT_MODE" = "Dark" ] || [ "$CURRENT_MODE" = "prefer-dark" ]; then
  CURRENT_MODE='dark'
else
  CURRENT_MODE='light'
fi

set_cache_value() {
    key="$1"
    value="$2"
    echo "$value" > "$CACHE_DIR/$key"
    # Обновляем значение для текущих сессий fish
    fish -c "set -Ue $key && set -ge $key && set -Ux $key $value"
}

get_cache_value() {
    key="$1"
    default="$2"
    cat "$CACHE_DIR/$key" 2>/dev/null || echo "$default"
}

set_theme() {
    local background="$1"
    local theme="$2"
    set_cache_value "background" "$background"
    set_cache_value "theme" "$theme"
}

change_vim_theme() {
  theme_for_vim_panes="$1"
  colorscheme=$DARKTHEME
  transparent="Disable"

  if [ "$theme_for_vim_panes" = "light" ]; then
    colorscheme=$LIGHTTHEME
  elif [ "$theme_for_vim_panes" = "transparent" ]; then
    transparent="Enable"
    theme_for_vim_panes="dark"
  fi

  tmux list-panes -a -F '#{pane_id} #{pane_current_command}' |
    grep vim |
    cut -d ' ' -f 1 |
    xargs -I PANE tmux send-keys -t PANE ESCAPE \
      ":set background=${theme_for_vim_panes}" ENTER \
      ":lua vim.cmd.colorscheme('${colorscheme}')" ENTER \
      ":Transparent${transparent}" ENTER
}

enable_dark_theme() {
  theme="dark"
  set_theme $theme $DARKTHEME
  change_vim_theme $theme
  change_alacritty_theme $DARKTHEME
  change_system_theme $theme
}

enable_light_theme() {
  theme="light"
  set_theme $theme $LIGHTTHEME
  change_vim_theme $theme
  change_alacritty_theme $LIGHTTHEME
  change_system_theme $theme
}

enable_transparent_theme() {
  # set dark theme because transparent theme is based on dark theme
  local theme="dark"
  set_theme $theme $DARKTHEME
  change_vim_theme "transparent"
  change_alacritty_theme "transparent"
}

change_alacritty_theme() {
  {{ if (eq .chezmoi.os "darwin") }}
  sed -i '' "2s|.*|import = [\"~/.config/alacritty/themes/${1}.toml\"]|" "$ALACRITTYCONF"
  {{ else }}
  sed -i "2s|.*|import = [\"~/.config/alacritty/themes/${1}.toml\"]|" "$ALACRITTYCONF"
  {{ end }}
}

change_system_theme() {
  # send a signal to the system to change the theme when
  # the CHANGE_SYSTEM_THEME var is set to 1 or empty and the THEME variable is set
  if [[ "$CHANGE_SYSTEM_THEME" = "1" && ! -z "$THEME" ]]; then
  {{ if (eq .chezmoi.os "darwin") }}
    dark=false
    [[ "$1" = "dark" ]] && dark=true
    osascript -l JavaScript -e "Application('System Events').appearancePreferences.darkMode = $dark" > /dev/null
  {{ else if (eq .chezmoi.os "linux") -}}
    if command -v dconf >/dev/null 2>&1; then
      theme='prefer-light'
      [[ "$1" = "dark" ]] && theme='prefer-dark'
      dconf write /org/gnome/desktop/interface/color-scheme "'$theme'"
    fi
  {{ end }}
  fi
}

if [ -z "$THEME" ]; then
  if [ "$CURRENT_MODE" = "dark" ]; then
    enable_dark_theme
  else
    enable_light_theme
  fi
else
  if [ "$THEME" = "dark" ]; then
    enable_dark_theme
  elif [ "$THEME" = "transparent" ]; then
    enable_transparent_theme
  else
    enable_light_theme
  fi
fi

if [[ "$CHANGE_SYSTEM_THEME" = "1" && ! -z "$THEME" ]]; then
  echo "System theme set to $THEME"
else
  if [ -z "$THEME" ]; then
    THEME=$CURRENT_MODE
  fi
  echo "Theme set to $THEME"
fi

# disabled because current tmux style looks great with any theme
# tmux source-file "$TMUXCONF"
